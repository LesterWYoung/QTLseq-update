#! /bin/sh

#This script uses trimmomatic to produce filtered and trimmed files
#This version is for trimming the secondary reference (assuming it's being generated by this pipeline)
#The reads are in ../parental_readfiles/name_R[12].fastq.gz

source ../0.common/common.fnc	#load common variables, including Key1_My_cultivar_sample_name
				# and $Key1_Phred_quality_score_for_my_cultivar (default=30)

echo "\n----------\nTrimming and filtering secondary readfiles\n----------"

printf "Path to trimmomatic: "
	Set_TRIMMOMATIC			# TRIMMOMATIC=${Key1_Path_to_trimmomatic}. Probably .ibrc_scripts/1./trimmomatic

printf "Min Phred value for ${MY_CUTLIVAR_NAME} reads: "
	Set_READ_QVAL_MY_CULTIVAR	# READ_QVAL_MY_CULTIVAR=${Key1_Phred_quality_score_for_my_cultivar} in config.txt

printf "Min length of ${MY_CULTIVAR_NAME} reads after trimming: "
	Set_MIN_LEN_MY_CULTIVAR_READS	# MIN_LEN_MY_CULTIVAR_READS=90 set in config.txt and used by trimmomatic

printf "Name of parental cultivar used for secondary reference: "
	Set_MY_CULTIVAR_NAME		# MY_CUTIVAR_NAME=${Key1_My_cultivar_sample_name} in config.txt 
	CMD="find ../parental_readfiles/${MY_CULTIVAR_NAME}_R[12].fastq.gz > readfilelist"
	eval ${CMD}

echo "Parental readfiles being used to generate secondary reference"; cat readfilelist

numfiles=`wc -l < readfilelist`
	if [ $numfiles -eq 0 ]      	# if no readfiles are present
		then echo "Parental readfiles are missing. Put them in ../parental_readfiles using name_R[12].fastq.gz format"
		exit 1
	fi

	if [ $numfiles -gt 2 ]; then	#if more than two readfiles are present, then exit
		echo "There are more than two readfiles in ../parental_readfiles/"
		exit 2
	fi

	if [ $numfiles -eq 1 ]; then	#if there is only one readfile present, also exit
		echo "Two readfiles are required (one forward and one reverse) in ../parental_readfiles/"
		exit 3
	fi

while read -r readfile; do
	readfilename=`basename $readfile`		#gets file name, removing path
							# echo "filename being used = $readfilename"

        read_direction=`cut -f 2 -d "_" <<< $readfilename | cut -f 1 -d "."`
        						#searches for "-R[12]." to get read direction
							# echo "read dir = $read_direction"

	if [[ $read_direction == "R1" ]]; then		#if foward readfile, then assign forward variable names
        						#echo "found R1"
		readfileR1=$readfile
		outfileR1paired="secondary_readfiles/${MY_CULTIVAR_NAME}-paired_R1.fastq.gz"
		outfileR1unpaired="secondary_readfiles/${MY_CULTIVAR_NAME}-unpaired_R1.fastq.gz"
							# echo "$readfileR1  $outfileR1paired   $outfileR1unpaired"

	else
        						#echo "found R2"
		readfileR2=$readfile
		outfileR2paired="secondary_readfiles/${MY_CULTIVAR_NAME}-paired_R2.fastq.gz"
		outfileR2unpaired="secondary_readfiles/${MY_CULTIVAR_NAME}-unpaired_R2.fastq.gz"
							# echo "$readfileR2  $outfileR2paired   $outfileR2unpaired"
		if [ ! -f ${readfileR2} ]; then         # checks to see if reverse file exists. If not, then exit
                                echo "Warning! Expected to find ${readfileR2} to match ${readfileR1}, but it doesn't exist!"
                                echo "Both R1 and R2 readfiles for an individual should have the same name and number"
                                exit 4
                fi
        fi

done < readfilelist

CMD="java -jar ${TRIMMOMATIC} PE"
CMD="$CMD $readfileR1 $readfileR2"			#fwd and rev readfiles to be trimmed
CMD="$CMD $outfileR1paired $outfileR1unpaired"		#fwd output reads (paired with rev reads and unpaired)
CMD="$CMD $outfileR2paired $outfileR2unpaired"		#rev output reads (paired with fwd reads and unpaired)
CMD="$CMD LEADING:4 TRAILING:4"			#trims bases from each end if qual<15. Change if desired
CMD="$CMD SLIDINGWINDOW:4:${READ_QVAL}"			# cut if average quality score for sliding window < set value
CMD="$CMD MINLEN:${MIN_LEN_MY_CULTIVAR_READS}"		#filter out reads < set value after trimming
CMD="$CMD AVGQUAL:${READ_QVAL}"				#remove read if average quality is less than set value

#echo ${CMD}
eval ${CMD}

echo "Completed trimming and filtering secondary reference readfiles"
